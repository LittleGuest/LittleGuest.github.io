<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rust生命周期 on gopher9527&#39;s Blog</title>
    <link>https://littleguest.github.io/tags/rust%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link>
    <description>Recent content in Rust生命周期 on gopher9527&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 12 Jan 2021 21:41:40 +0000</lastBuildDate><atom:link href="https://littleguest.github.io/tags/rust%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rust之旅-生命周期</title>
      <link>https://littleguest.github.io/posts/rust-tour-lifetime/</link>
      <pubDate>Tue, 12 Jan 2021 21:41:40 +0000</pubDate>
      
      <guid>https://littleguest.github.io/posts/rust-tour-lifetime/</guid>
      <description>生命周期与引用有效性 Rust 中的每一个引用都有其 生命周期（lifetime），也就是引用保持有效的作用域。大部分时候生命周期是隐含并可以推断的，正如大部分时候类型也是可以推断的一样。类似于当因为有多种可能类型的时候必须注明类型，也会出现引用的生命周期以一些不同方式相关联的情况，所以 Rust 需要我们使用 泛型生命周期参数 来注明他们的关系，这样就能确保运行时实际使用的引用绝对是有效的。
生命周期避免了悬垂引用
借用检查器：比较作用域来确保所有的借用都是有效的
生命周期语法
 生命周期参数名称必须以撇号（&#39;）开头，其名称通常全是小写，类似于泛型其名称非常短。&amp;lsquo;a 是大多数人默认使用的名称。生命周期参数注解位于引用的 &amp;amp; 之后，并有一个空格来将引用类型与生命周期注解分隔开；
 通过在函数签名中指定生命周期参数时，我们并没有改变任何传入值或返回值的生命周期，而是指出任何不满足这个约束条件的值都将被借用检查器拒绝；
指定生命周期参数的正确方式依赖函数实现的具体功能；
当从函数返回一个引用，返回值的生命周期参数需要与一个参数的生命周期参数相匹配。如果返回的引用 没有 指向任何一个参数，那么唯一的可能就是它指向一个函数内部创建的值，它将会是一个悬垂引用，因为它将会在函数结束时离开作用域。最好的解决方案是返回一个有所有权的数据类型而不是一个引用；
生命周期语法是用于将函数的多个参数与其返回值的生命周期进行关联的。一旦他们形成了某种关联，Rust 就有了足够的信息来允许内存安全的操作并阻止会产生悬垂指针亦或是违反内存安全的行为；</description>
    </item>
    
  </channel>
</rss>
